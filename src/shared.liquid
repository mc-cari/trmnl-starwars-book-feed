<style>

.category-tag {
  background: #f0f0f0;
  padding: 2px 6px;
  margin-right: 5px;
  border-radius: 3px;
  display: inline-block;
  margin-bottom: 2px;
}



</style>

<script>

  async function fetchArticleText(url) {
    try {
      const proxyUrl = 'https://api.allorigins.win/raw?url=';
      const response = await fetch(proxyUrl + encodeURIComponent(url));
      const html = await response.text();
      
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      const scripts = doc.querySelectorAll('script, style, nav, header, footer, .sidebar, .comments, .advertisement');
      scripts.forEach(el => el.remove());
      

      let articleContent = '';
      
      const selectors = [
        'article',
        '.entry-content',
        '.post-content',
        '.article-content',
        '.content',
        '.main-content',
        '#content',
        '.post-body',
        '.entry-body'
      ];
      
      for (const selector of selectors) {
        const element = doc.querySelector(selector);
        if (element) {

          const textElements = element.querySelectorAll('p, h1, h2, h3, h4, h5, h6, blockquote');
          articleContent = Array.from(textElements)
            .map(el => el.textContent.trim())
            .filter(text => text.length > 20)
            .join('\n\n');
          break;
        }
      }
      

      if (!articleContent) {
        const paragraphs = doc.querySelectorAll('p');
        articleContent = Array.from(paragraphs)
          .map(p => p.textContent.trim())
          .filter(text => text.length > 30 && !text.includes('Skip to content') && !text.includes('Copyright'))
          .slice(0, 10) 
          .join('\n\n');
      }
      
      articleContent = articleContent
        .replace(/\n\s*\n/g, '\n\n') 
        .replace(/\s+/g, ' ') 
        .trim();
      
      if (articleContent.length > 4000) {
        articleContent = articleContent.substring(0, 4000) + '...';
      }
      
      return articleContent || 'Article content could not be extracted.';
      
    } catch (error) {
      console.error('Error fetching article text:', error);
      return 'Unable to fetch article content.';
    }
  }

  async function generateSummary(articleUrl, summaryElementId, nSentences) {
    try {
      const apiKey = '{{ trmnl.plugin_settings.custom_fields_values.openai_api_key }}';
      if (!apiKey || apiKey === '' ) {
        throw new Error('OpenAI API key not configured');
      }

      const articleText = await fetchArticleText(articleUrl);

      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: `You are a helpful assistant that summarizes Star Wars news articles. Provide concise, engaging summaries in around ${nSentences} sentences.`
            },
            {
              role: 'user',
              content: `Here is the article content:\n\n${articleText}\n\n` + `Please summarize the above in ${nSentences} sentences.`
            }
          ],
          max_tokens: 350,
          temperature: 0.7
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        throw new Error('Invalid response format from OpenAI API');
      }
      
      const summary = data.choices[0].message.content;
      
      const summaryElement = document.getElementById(summaryElementId);
      if (summaryElement) {
        summaryElement.textContent = summary;
        summaryElement.classList.remove('summary-loading');
      }
    } catch (error) {
      console.error('Error generating summary:', error);
      const summaryElement = document.getElementById(summaryElementId);
      if (summaryElement) {
        if (error.message.includes('API key not configured')) {
          summaryElement.textContent = 'Please configure OpenAI API key in plugin settings';
        } else if (error.message.includes('401')) {
          summaryElement.textContent = 'Invalid API key - please check your OpenAI API key';
        } else {
          summaryElement.textContent = 'Summary unavailable - ' + error.message;
        }
        summaryElement.classList.remove('summary-loading');
      }
    }
  }

  async function extractImageFromArticle(articleUrl, imageElementId) {
    try {
      const proxyUrl = 'https://api.allorigins.win/raw?url=';
      const response = await fetch(proxyUrl + encodeURIComponent(articleUrl));
      const html = await response.text();
      
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      let imageUrl = null;
      const featuredImg = doc.querySelector('meta[property="og:image"]');
      if (featuredImg) {
        imageUrl = featuredImg.getAttribute('content');
      }
      
      if (imageUrl) {
        const imgElement = document.getElementById(imageElementId);
        if (imgElement) {
          imgElement.innerHTML = `<img class="image-dither" src="${imageUrl}" alt="Article image" style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px;">`;
        }
      } else {
        const imgElement = document.getElementById(imageElementId);
        if (imgElement) {
          imgElement.innerHTML = 'No image available';
        }
      }
    } catch (error) {
      console.error('Error extracting image:', error);
      const imgElement = document.getElementById(imageElementId);
      if (imgElement) {
        imgElement.innerHTML = 'Image unavailable';
      }
    }
  }

</script>